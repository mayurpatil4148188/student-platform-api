"""Initial migration

Revision ID: f790d5274c68
Revises:
Create Date: 2025-09-13 15:45:46.238498

"""

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = "f790d5274c68"
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "students",
        sa.Column(
            "name", sa.String(length=100), nullable=False, comment="Student's full name"
        ),
        sa.Column(
            "email",
            sa.String(length=100),
            nullable=False,
            comment="Student's email address (unique)",
        ),
        sa.Column(
            "phone",
            sa.String(length=20),
            nullable=False,
            comment="Student's phone number with country code",
        ),
        sa.Column(
            "highest_status",
            sa.String(length=50),
            nullable=True,
            comment="Highest application status among all applications",
        ),
        sa.Column(
            "highest_intake",
            sa.String(length=20),
            nullable=True,
            comment="Intake date of the highest status application",
        ),
        sa.Column(
            "notes",
            sa.Text(),
            nullable=True,
            comment="Internal notes about the student",
        ),
        sa.Column(
            "id",
            sa.Integer(),
            autoincrement=True,
            nullable=False,
            comment="Primary key",
        ),
        sa.Column(
            "created_at",
            sa.DateTime(),
            nullable=False,
            comment="Timestamp when record was created",
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(),
            nullable=False,
            comment="Timestamp when record was last updated",
        ),
        sa.Column(
            "is_deleted", sa.Boolean(), nullable=False, comment="Soft delete flag"
        ),
        sa.Column(
            "deleted_at",
            sa.DateTime(),
            nullable=True,
            comment="Timestamp when record was soft deleted",
        ),
        sa.PrimaryKeyConstraint("id"),
        comment="Students table storing student information and calculated status",
    )
    with op.batch_alter_table("students", schema=None) as batch_op:
        batch_op.create_index("idx_student_created_at", ["created_at"], unique=False)
        batch_op.create_index("idx_student_email", ["email"], unique=False)
        batch_op.create_index(
            "idx_student_highest_status", ["highest_status"], unique=False
        )
        batch_op.create_index(batch_op.f("ix_students_email"), ["email"], unique=True)
        batch_op.create_index(
            batch_op.f("ix_students_is_deleted"), ["is_deleted"], unique=False
        )

    op.create_table(
        "applications",
        sa.Column(
            "student_id",
            sa.Integer(),
            nullable=False,
            comment="Reference to the student",
        ),
        sa.Column(
            "university_name",
            sa.String(length=200),
            nullable=False,
            comment="Name of the university",
        ),
        sa.Column(
            "program_name",
            sa.String(length=200),
            nullable=False,
            comment="Name of the academic program",
        ),
        sa.Column(
            "intake",
            sa.String(length=20),
            nullable=False,
            comment="Intake period (e.g., 'Jan 2026', 'Sep 2026')",
        ),
        sa.Column(
            "status",
            sa.String(length=50),
            nullable=False,
            comment="Current application status",
        ),
        sa.Column(
            "notes",
            sa.Text(),
            nullable=True,
            comment="Additional notes about the application",
        ),
        sa.Column(
            "application_id",
            sa.String(length=100),
            nullable=True,
            comment="External application ID from university",
        ),
        sa.Column(
            "id",
            sa.Integer(),
            autoincrement=True,
            nullable=False,
            comment="Primary key",
        ),
        sa.Column(
            "created_at",
            sa.DateTime(),
            nullable=False,
            comment="Timestamp when record was created",
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(),
            nullable=False,
            comment="Timestamp when record was last updated",
        ),
        sa.Column(
            "is_deleted", sa.Boolean(), nullable=False, comment="Soft delete flag"
        ),
        sa.Column(
            "deleted_at",
            sa.DateTime(),
            nullable=True,
            comment="Timestamp when record was soft deleted",
        ),
        sa.CheckConstraint(
            "status IN ('Building Application', 'Application Submitted to University', 'Offer Received', 'Offer Accepted by Student', 'Visa Approved', 'Dropped')",
            name="check_valid_status",
        ),
        sa.ForeignKeyConstraint(["student_id"], ["students.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("application_id"),
        comment="Applications table storing university applications for students",
    )
    with op.batch_alter_table("applications", schema=None) as batch_op:
        batch_op.create_index("idx_application_intake", ["intake"], unique=False)
        batch_op.create_index("idx_application_status", ["status"], unique=False)
        batch_op.create_index(
            "idx_application_student_id", ["student_id"], unique=False
        )
        batch_op.create_index(
            "idx_application_student_status", ["student_id", "status"], unique=False
        )
        batch_op.create_index(
            batch_op.f("ix_applications_intake"), ["intake"], unique=False
        )
        batch_op.create_index(
            batch_op.f("ix_applications_is_deleted"), ["is_deleted"], unique=False
        )
        batch_op.create_index(
            batch_op.f("ix_applications_status"), ["status"], unique=False
        )
        batch_op.create_index(
            batch_op.f("ix_applications_student_id"), ["student_id"], unique=False
        )

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table("applications", schema=None) as batch_op:
        batch_op.drop_index(batch_op.f("ix_applications_student_id"))
        batch_op.drop_index(batch_op.f("ix_applications_status"))
        batch_op.drop_index(batch_op.f("ix_applications_is_deleted"))
        batch_op.drop_index(batch_op.f("ix_applications_intake"))
        batch_op.drop_index("idx_application_student_status")
        batch_op.drop_index("idx_application_student_id")
        batch_op.drop_index("idx_application_status")
        batch_op.drop_index("idx_application_intake")

    op.drop_table("applications")
    with op.batch_alter_table("students", schema=None) as batch_op:
        batch_op.drop_index(batch_op.f("ix_students_is_deleted"))
        batch_op.drop_index(batch_op.f("ix_students_email"))
        batch_op.drop_index("idx_student_highest_status")
        batch_op.drop_index("idx_student_email")
        batch_op.drop_index("idx_student_created_at")

    op.drop_table("students")
    # ### end Alembic commands ###
